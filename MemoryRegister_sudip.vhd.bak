library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity MemoryRegister_sudip is
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           address : in  STD_LOGIC_VECTOR (3 downto 0);
           write_enable : in  STD_LOGIC;
           data_in : in  STD_LOGIC_VECTOR (7 downto 0);
           data_out : out  STD_LOGIC_VECTOR (7 downto 0));
end MemoryRegister_sudip;

architecture Behavioral of MemoryRegister_sudip is
    type memory_array is array (0 to 15) of std_logic_vector(7 downto 0);
    signal memory : memory_array := (others => (others => '0'));
    signal register_data : std_logic_vector(7 downto 0) := (others => '0');
begin
    process(clk, reset)
    begin
        if reset = '1' then
            memory <= (others => (others => '0'));
            register_data <= (others => '0');
        elsif rising_edge(clk) then
            if write_enable = '1' then
                memory(to_integer(unsigned(address))) <= data_in;
            end if;
            register_data <= memory(to_integer(unsigned(address)));
        end if;
    end process;
    
    data_out <= register_data;
end Behavioral;

